library(fbwR)
ls(fbwR)
ls(package:fbwR)
ressim <- flwR::loadResSim (
ressim <- flwR::loadResSim(
# Path to the ResSim file infile = file.path ("inputs", "DET_Alt2_ResSim.xlsx"
# These optional arguments tell R which sheets to use
elevsheet = "POOL-ELEV",
outflowsheet = "FLOW-OUT",
powerhousesheet = "FLOW-PH",
rosheet = "FLOW-RO",
spillsheet = "FLOW-SPILL")
ressim
ressim <- flwR::loadResSim(
# Path to the ResSim file infile = file.path ("inputs", "DET_Alt2_ResSim.xlsx"
# These optional arguments tell R which sheets to use
elevsheet = "POOL-ELEV",
outflowsheet = "FLOW-OUT",
powerhousesheet = "FLOW-PH",
rosheet = "FLOW-RO",
spillsheet = "FLOW-SPILL")
ressim <- flwR::loadResSim(
# Path to the ResSim file
infile = file.path ("inputs", "DET_Alt2_ResSim.xlsx"
# These optional arguments tell R which sheets to use
elevsheet = "POOL-ELEV",
ressim <- flwR::loadResSim(
# Path to the ResSim file
infile = file.path ("inputs", "DET_Alt2_ResSim.xlsx",
# These optional arguments tell R which sheets to use
elevsheet = "POOL-ELEV",
powerhousesheet = "FLOW-PH",
spillsheet = "FLOW-SPILL")
ressim <- flwR::loadResSim(
# Path to the ResSim file
infile = file.path ("inputs", "DET_Alt2_ResSim.xlsx"),
# These optional arguments tell R which sheets to use
elevsheet = "POOL-ELEV",
outflowsheet = "FLOW-OUT",
powerhousesheet = "FLOW-PH",
rosheet = "FLOW-RO",
spillsheet = "FLOW-SPILL")
ressim <- fbwR::loadResSim(
# Path to the ResSim file
infile = file.path ("inputs", "DET_Alt2_ResSim.xlsx"),
# These optional arguments tell R which sheets to use
elevsheet = "POOL-ELEV",
outflowsheet = "FLOW-OUT",
powerhousesheet = "FLOW-PH",
rosheet = "FLOW-RO",
spillsheet = "FLOW-SPILL")
getwd()
setwd('/Users/alerubio/Desktop/fbw')
setwd('/Users/alerubio/Desktop/fbw')
runFBW <- function(template_file = NULL, param_list = NULL,
ressim_file = NULL, ressim = NULL, ressim_wide = TRUE,
summarize = FALSE, verbose = FALSE) {
if (!is.null(ressim)) {
message("...Using provided ResSim inputs")
} else {
message(paste0(
"...Loading ResSim from file: ", basename(ressim_file)))
ressim <- fbwR::loadResSim(infile = ressim_file, wide = ressim_wide)
}
if (!is.null(param_list)) {
message("...Using provided param_list inputs")
} else {
message(paste0(
"...Loading parameters from template file: ", basename(template_file)))
param_list <- fbwR::loadFromTemplate(template_file = template_file)
}
# Distribute fish population into daily passing populations
fish_daily <- data.frame(fbwR::distributeFishDaily(ressim,
param_list = param_list, verbose = verbose))
# Calculate DPE
fish_daily_postDPE <- dplyr::mutate(fish_daily,
dpe = fbwR::fetchDPE(fish_daily,
param_list = param_list)$dam_passage_efficiency,
# Multiply approaching population by dam passage efficiency
approaching_daily_postDPE = .data$approaching_daily * .data$dpe
)
fish_distributed <- fbwR::distributeFish_outlets(
fish_postDPE = fish_daily_postDPE,
param_list = param_list, verbose = verbose)
# Calculate survival rates from flow data, including distribution of fish
#   through gates in multi-gate outlets
route_survival_rates <- fbwR::distributeFlow_Survival_gates(
fish_distributed_outlets = fish_distributed,
param_list = param_list)
# Perform final calculations, multiplying survival by the proportion of fish
#   in outlet X (F.X)
fish_passage_survival <-  dplyr::mutate(route_survival_rates,
passage_survRO = .data$ro_survival * .data$F.RO,
passage_survTurb = .data$turb_survival * .data$F.turb,
passage_survSpill = .data$spill_survival * .data$F.spill,
passage_survFPS = .data$fps_survival * .data$F.FPS,
passage_survAllRoutes = .data$passage_survRO + .data$passage_survTurb +
.data$passage_survSpill + .data$passage_survFPS
)
attr(fish_passage_survival, "inputData") <- list(param_list = param_list, ressim = ressim)
if (summarize == FALSE) {
return(fish_passage_survival)
} else {
return(summarizeFBW(fish_passage_survival, param_list))
}
}
source("~/GitHub/fbwR/R/runFBW.r")
